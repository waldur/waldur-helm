apiVersion: v1
kind: ConfigMap
metadata:
  name: api-override-config
data:
  override.conf.py: |-
    #
    # Configuration for Waldur plugins
    #
    # Django
    #

    import os

    SECRET_KEY = os.environ.get('GLOBAL_SECRET_KEY')

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get('POSTGRESQL_NAME'),
            'HOST': os.environ.get('POSTGRESQL_HOST'),
            'PORT': os.environ.get('POSTGRESQL_PORT'),
            'USER': os.environ.get('POSTGRESQL_USER'),
            'PASSWORD': os.environ.get('POSTGRESQL_PASSWORD'),
        },
    }

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'waldur_cache',
        }
    }

    CELERY_BROKER_URL = {{ include "waldur.rabbitmq.rmqUrl" . | quote }}

    postgresql_host = os.environ.get('POSTGRESQL_HOST')
    postgresql_port = os.environ.get('POSTGRESQL_PORT')
    postgresql_user = os.environ.get('POSTGRESQL_USER')
    postgresql_password = os.environ.get('POSTGRESQL_PASSWORD')
    postgresql_name = 'celery_results'
    CELERY_RESULT_BACKEND = f'db+postgresql://{postgresql_user}:{postgresql_password}@{postgresql_host}:{postgresql_port}/{postgresql_name}'

    EMAIL_HOST = '{{ .Values.waldur.mail.host }}'

    {{ if .Values.waldur.notificationSubject }}
    WALDUR_CORE['NOTIFICATION_SUBJECT'] = '{{ .Values.waldur.notificationSubject }}'
    {{ end }}

    {{ if .Values.waldur.timeZone }}
    # Local time zone to use. See all at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    TIME_ZONE = '{{ .Values.waldur.timeZone }}'
    {{ end }}

    WALDUR_CORE['AUTHENTICATION_METHODS'] = {{ .Values.waldur.authMethods | toJson }}
    WALDUR_CORE['HOMEPORT_URL'] = '{{ printf "%s://%s/" .Values.homeportScheme .Values.homeportHostname }}'

    {{ if and (has "SOCIAL_SIGNUP" .Values.waldur.authMethods) (not (has "waldur_auth_social" .Values.waldur.disabledExtensions)) }}

    {{ if has "SMARTIDEE" .Values.waldur.socialAuthMethods }}
    WALDUR_AUTH_SOCIAL.update({
        'SMARTIDEE_SECRET': '{{ .Values.waldur.smartid.secret }}',
        'SMARTIDEE_CLIENT_ID': '{{ .Values.waldur.smartid.clientId }}',
    })
    {{ end }}

    {{ if has "TARA" .Values.waldur.socialAuthMethods }}
    WALDUR_AUTH_SOCIAL.update({
        'TARA_SECRET': '{{ .Values.waldur.tara.secret }}',
        'TARA_CLIENT_ID': '{{ .Values.waldur.tara.clientId }}',
        'TARA_SANDBOX': False,
        'TARA_MANAGEMENT_URL': '{{ .Values.waldur.tara.managementUrl }}',
        'TARA_USER_PROTECTED_FIELDS': {{ .Values.waldur.tara.protectedFields | toJson }},
    })
    {{ end }}

    {{ if has "KEYCLOAK" .Values.waldur.socialAuthMethods }}
    WALDUR_AUTH_SOCIAL.update({
        'KEYCLOAK_AUTH_URL': '{{ .Values.waldur.keycloak.auth_url }}',
        'KEYCLOAK_CLIENT_ID': '{{ .Values.waldur.keycloak.client_id }}',
        'KEYCLOAK_LABEL': '{{ .Values.waldur.keycloak.label }}',
        'KEYCLOAK_SECRET': '{{ .Values.waldur.keycloak.secret }}',
        'KEYCLOAK_TOKEN_URL': '{{ .Values.waldur.keycloak.token_url }}',
        'KEYCLOAK_USERINFO_URL': '{{ .Values.waldur.keycloak.userinfo_url }}',
        'KEYCLOAK_MANAGEMENT_URL': '{{ .Values.waldur.keycloak.managementUrl }}',
        'KEYCLOAK_USER_PROTECTED_FIELDS': {{ .Values.waldur.keycloak.protectedFields | toJson }},
    })
    {{ end }}

    {{ if has "EDUTEAMS" .Values.waldur.socialAuthMethods }}
    WALDUR_AUTH_SOCIAL.update({
        'EDUTEAMS_LABEL': '{{ .Values.waldur.eduteams.label }}',
        'EDUTEAMS_CLIENT_ID': '{{ .Values.waldur.eduteams.clientId }}',
        'EDUTEAMS_SECRET': '{{ .Values.waldur.eduteams.secret }}',
        'EDUTEAMS_AUTH_URL': '{{ .Values.waldur.eduteams.authUrl }}',
        'EDUTEAMS_TOKEN_URL': '{{ .Values.waldur.eduteams.tokenUrl }}',
        'EDUTEAMS_USERINFO_URL': '{{ .Values.waldur.eduteams.userinfoUrl }}',
        'EDUTEAMS_MANAGEMENT_URL': '{{ .Values.waldur.eduteams.managementUrl }}',
        'EDUTEAMS_USER_PROTECTED_FIELDS': {{ .Values.waldur.eduteams.protectedFields | toJson }},
        'REMOTE_EDUTEAMS_REFRESH_TOKEN': '{{ .Values.waldur.eduteams.remoteRefreshToken }}',
        'REMOTE_EDUTEAMS_CLIENT_ID': '{{ .Values.waldur.eduteams.remoteClientID }}',
        'REMOTE_EDUTEAMS_SECRET': '{{ .Values.waldur.eduteams.remoteSecret }}',
        'REMOTE_EDUTEAMS_USERINFO_URL': '{{ .Values.waldur.eduteams.remoteUserinfoUrl }}',
        'REMOTE_EDUTEAMS_TOKEN_URL': '{{ .Values.waldur.eduteams.remoteTokenUrl }}',
        {{ if .Values.waldur.eduteams.enableSync }}
        'ENABLE_EDUTEAMS_SYNC': True,
        {{ end }}
        {{ if and (.Values.waldur.eduteams.remoteClientID) (.Values.waldur.eduteams.remoteSecret) }}
        'REMOTE_EDUTEAMS_ENABLED': True,
        {{ end }}
    })
    {{ end }}

    {{ end }}

    {{ if has "LDAP" .Values.waldur.authMethods }}
    #
    # LDAP
    #
    import ldap
    from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

    # LDAP authentication.
    # See also: https://django-auth-ldap.readthedocs.io/en/latest/authentication.html
    AUTHENTICATION_BACKENDS += (
        'django_auth_ldap.backend.LDAPBackend',
    )

    AUTH_LDAP_SERVER_URI = '{{ .Values.waldur.ldap.host }}'

    # Following variables are not used by django-auth-ldap,
    # they are used as templates for other variables
    AUTH_LDAP_BASE = '{{ .Values.waldur.ldap.baseDN }}'
    AUTH_LDAP_USER_BASE = '{{ .Values.waldur.ldap.userDN }}'

    # Format authenticating user's distinguished name using template
    AUTH_LDAP_USER_DN_TEMPLATE = 'uid=%(user)s,' + AUTH_LDAP_USER_BASE

    # Credentials for admin user
    AUTH_LDAP_BIND_DN = 'uid={{ .Values.waldur.ldap.user }},' + AUTH_LDAP_USER_BASE
    AUTH_LDAP_BIND_PASSWORD = '{{ .Values.waldur.ldap.password }}'

    # Populate the Django user from the LDAP directory.
    AUTH_LDAP_USER_ATTR_MAP = {
        'full_name': 'displayName',
        'email': 'mail'
    }

    # Set up the basic group parameters.
    AUTH_LDAP_GROUP_BASE = "cn=groups," + AUTH_LDAP_BASE
    AUTH_LDAP_GROUP_FILTER = "(objectClass=groupOfNames)"
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(AUTH_LDAP_GROUP_BASE,
        ldap.SCOPE_SUBTREE, AUTH_LDAP_GROUP_FILTER)
    AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        'is_staff': '{{ .Values.waldur.ldap.admins }},' + AUTH_LDAP_GROUP_BASE,
        'is_support': '{{ .Values.waldur.ldap.support }},' + AUTH_LDAP_GROUP_BASE,
    }
    {{ end }}

    #
    # waldur-freeipa
    #

    {{ if and (has "freeipa" .Values.waldur.features) (not (has "waldur_freeipa" .Values.waldur.disabledExtensions)) }}
    WALDUR_FREEIPA.update({
        'ENABLED': True,
        'GROUPNAME_PREFIX': '{{ .Values.waldur.freeipa.groupnamePrefix }}',
        'HOSTNAME': '{{ .Values.waldur.freeipa.hostname }}',
        'PASSWORD': '{{ .Values.waldur.freeipa.password }}',
        'USERNAME': '{{ .Values.waldur.freeipa.username }}',
        'USERNAME_PREFIX': '{{ .Values.waldur.freeipa.usernamePrefix }}',
        'VERIFY_SSL': {{ .Values.waldur.freeipa.verifySSL }},
    })
    {{ end }}

    {{ if and (has "freeipa_group_synchronization_disabled" .Values.waldur.features) (not (has "waldur_freeipa" .Values.waldur.disabledExtensions)) }}
    WALDUR_FREEIPA.update({
        'GROUP_SYNCHRONIZATION_ENABLED': False,
    })
    {{ end }}

    {{ if and (has "VALIMO" .Values.waldur.authMethods) (not (has "waldur_auth_valimo" .Values.waldur.disabledExtensions)) }}
    WALDUR_AUTH_VALIMO.update({
        'AP_ID': '{{ .Values.waldur.valimo.apId }}',
        'AP_PWD': '{{ .Values.waldur.valimo.apPwd }}',
        'DNSName': '{{ .Values.waldur.valimo.dnsname }}',
        'cert_path': '/etc/waldur/valimo/valimo-client.crt',
        'key_path': '/etc/waldur/valimo/valimo-client.key',
        'URL': '{{ .Values.waldur.valimo.url }}',
        'SignatureProfile': '{{ .Values.waldur.valimo.signatureProfile }}',
    {{ if .Values.waldur.valimo.label }}
        'LABEL': '{{ .Values.waldur.valimo.label }}',
    {{ end }}
    {{ if .Values.waldur.valimo.mobilePrefix }}
        'MOBILE_PREFIX': '{{ .Values.waldur.valimo.mobilePrefix }}',
    {{ end }}
        'USER_MANAGEMENT_URL': '{{ .Values.waldur.valimo.managementUrl }}',
        'USER_PROTECTED_FIELDS': {{ .Values.waldur.valimo.protectedFields | toJson }},
    })
    {{ end }}

    #
    # waldur-core
    # https://opennode.atlassian.net/wiki/display/WD/MasterMind+configuration#MasterMindconfiguration-Additionalsettings

    {{ if has "owner_can_manage_customer" .Values.waldur.features }}
    WALDUR_CORE['OWNER_CAN_MANAGE_CUSTOMER'] = True
    {{ end }}

    {{ if has "owner_can_register_service_provider" .Values.waldur.features }}
    WALDUR_MARKETPLACE['OWNER_CAN_REGISTER_SERVICE_PROVIDER'] = True
    {{ end }}

    {{ if has "owners_can_manage_owners" .Values.waldur.features }}
    WALDUR_CORE['OWNERS_CAN_MANAGE_OWNERS'] = True
    {{ end }}

    {{ if .Values.waldur.homeport.userMandatoryFields }}
    WALDUR_CORE["USER_MANDATORY_FIELDS"] = {{ .Values.waldur.homeport.userMandatoryFields | toJson }}
    {{ end }}

    {{ if .Values.waldur.homeport.userRegistrationHiddenFields }}
    WALDUR_CORE["USER_REGISTRATION_HIDDEN_FIELDS"] = {{ .Values.waldur.homeport.userRegistrationHiddenFields | toJson }}
    {{ end }}

    {{ if has "only_staff_manages_services" .Values.waldur.features }}
    WALDUR_CORE['ONLY_STAFF_MANAGES_SERVICES'] = True
    WALDUR_MARKETPLACE['OWNER_CAN_APPROVE_ORDER'] = False
    WALDUR_MARKETPLACE['MANAGER_CAN_APPROVE_ORDER'] = False
    WALDUR_MARKETPLACE['ADMIN_CAN_APPROVE_ORDER'] = False
    {{ end }}

    {{ if has "manager_can_approve_order" .Values.waldur.features }}
    WALDUR_MARKETPLACE['MANAGER_CAN_APPROVE_ORDER'] = True
    {{ if not (has "waldur_openstack.openstack" .Values.waldur.disabledExtensions) }}
    WALDUR_OPENSTACK['MANAGER_CAN_MANAGE_TENANTS'] = True
    {{ end }}
    {{ end }}

    {{ if has "admin_can_approve_order" .Values.waldur.features }}
    WALDUR_MARKETPLACE['ADMIN_CAN_APPROVE_ORDER'] = True
    {{ if not (has "waldur_openstack.openstack" .Values.waldur.disabledExtensions) }}
    WALDUR_OPENSTACK['ADMIN_CAN_MANAGE_TENANTS'] = True
    {{ end }}
    {{ end }}

    {{ if has "create_default_project_on_organization_creation" .Values.waldur.features }}
    WALDUR_CORE['CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION'] = True
    {{ end }}

    # Disable geoip location till HomePort releases maps to a stable deployment
    WALDUR_CORE['ENABLE_GEOIP'] = False

    {{ if has "only_staff_can_invite_users" .Values.waldur.features }}
    WALDUR_CORE['ONLY_STAFF_CAN_INVITE_USERS'] = True
    {{ end }}

    {{ if has "invitation_create_missing_users" .Values.waldur.features }}
    WALDUR_CORE['INVITATION_CREATE_MISSING_USER'] = True
    {{ end }}

    {{ if has "invitation_disable_multiple_roles" .Values.waldur.features }}
    WALDUR_CORE['INVITATION_DISABLE_MULTIPLE_ROLES'] = True
    {{ end }}

    {{ if has "protect_freeipa_user_details" .Values.waldur.features }}
    WALDUR_CORE['PROTECT_USER_DETAILS_FOR_REGISTRATION_METHODS'] = ['FREEIPA']
    {{ end }}

    {{ if has "enable_accounting_start_date" .Values.waldur.features }}
    WALDUR_CORE['ENABLE_ACCOUNTING_START_DATE'] = True
    {{ end }}

    {{ if .Values.waldur.homeport.googleAnalyticsID }}
    WALDUR_CORE['GOOGLE_ANALYTICS_ID'] = {{ .Values.waldur.homeport.googleAnalyticsID | quote }}
    {{ end }}

    {{ if has "marketplace" .Values.waldur.features }}
    #
    # waldur-marketplace
    #

    {{ if has "disable_resource_end_date" .Values.waldur.features }}
    WALDUR_MARKETPLACE['ENABLE_RESOURCE_END_DATE'] = False
    {{ end }}

    {{ if .Values.waldur.marketplace.notify_staff }}
    WALDUR_MARKETPLACE['NOTIFY_STAFF_ABOUT_APPROVALS'] = True
    {{ end }}

    {{ if .Values.waldur.marketplace.script.enabled }}
    WALDUR_MARKETPLACE_SCRIPT['SCRIPT_RUN_MODE'] = 'k8s'
    WALDUR_MARKETPLACE_SCRIPT['K8S_CONFIG_PATH'] = '/etc/waldur/kubeconfig'
    {{ if .Values.waldur.marketplace.script.k8sNamespace }}
    WALDUR_MARKETPLACE_SCRIPT['K8S_NAMESPACE'] = "{{ .Values.waldur.marketplace.script.k8sNamespace }}"
    {{ end }}
    {{ if .Values.waldur.marketplace.script.dockerImages }}
    WALDUR_MARKETPLACE_SCRIPT['DOCKER_IMAGES'] = {{ .Values.waldur.marketplace.script.dockerImages | toJson }}
    {{ end }}
    {{ if .Values.waldur.marketplace.script.jobTimeout }}
    WALDUR_MARKETPLACE_SCRIPT['K8S_JOB_TIMEOUT'] = {{ .Values.waldur.marketplace.script.jobTimeout }}
    {{ end }}
    {{ end }}

    {{ if has "waldur_marketplace_notify_about_resource_change_disabled" .Values.waldur.features }}
    WALDUR_MARKETPLACE['NOTIFY_ABOUT_RESOURCE_CHANGE'] = False
    {{ end }}

    {{ end }}
    #
    # waldur-mastermind
    #
    {{ if has "billing" .Values.waldur.features }}
    WALDUR_INVOICES['ISSUER_DETAILS'].update({
        'company': '{{ .Values.waldur.invoice.company }}',
        'address': '{{ .Values.waldur.invoice.address }}',
        'country': '{{ .Values.waldur.invoice.country }}',
        'email': '{{ .Values.waldur.invoice.email }}',
        'postal': '{{ .Values.waldur.invoice.postalCode }}',
        'phone': {
            'country_code': '{{ .Values.waldur.invoice.phoneCountryCode }}',
            'national_number': '{{ .Values.waldur.invoice.phoneNationalNumber }}',
        },
        'bank': '{{ .Values.waldur.invoice.bank }}',
        'account': '{{ .Values.waldur.invoice.bankAccount }}',
        'vat_code': '{{ .Values.waldur.invoice.vatCode }}',
    })
    {{ end }}

    {{ if has "send_customer_invoices" .Values.waldur.features }}
    WALDUR_INVOICES['SEND_CUSTOMER_INVOICES'] = True
    {{ end }}

    {{ if .Values.waldur.paymentInterval }}
    WALDUR_INVOICES['PAYMENT_INTERVAL'] = {{ .Values.waldur.invoice.paymentInterval }}
    {{ end }}

    {{ if has "slurm" .Values.waldur.features }}
    # See also http://docs.waldur.com/SLURM+plugin+configuration
    WALDUR_SLURM.update({
        'ENABLED': True,
        'CUSTOMER_PREFIX': '{{ .Values.waldur.slurm.customerPrefix }}',
        'PROJECT_PREFIX': '{{ .Values.waldur.slurm.projectPrefix }}',
        'ALLOCATION_PREFIX': '{{ .Values.waldur.slurm.allocationPrefix }}',
    })
    {{ if .Values.waldur.ssh_private_key_path }}
    WALDUR_SLURM['PRIVATE_KEY_PATH'] = '/var/lib/waldur/id_rsa'
    {{ end }}
    {{ end }}

    {{ if and (has "support_basic" .Values.waldur.features) (not (has "waldur_support" .Values.waldur.disabledExtensions)) }}
    WALDUR_SUPPORT.update({
    {{ if .Values.waldur.support.customBackend }}
        'ACTIVE_BACKEND': '{{ .Values.waldur.support.customBackend }}',
    {{ else }}
        'ACTIVE_BACKEND': 'waldur_mastermind.support.backend.basic:BasicBackend',
        'ENABLED': True,
    {{ end }}
    })
    {{ end }}

    {{ if not (has "waldur_support" .Values.waldur.disabledExtensions) }}
    {{ if has "support" .Values.waldur.features }}
    WALDUR_SUPPORT.update({
        'ACTIVE_BACKEND': 'waldur_mastermind.support.backend.atlassian:ServiceDeskBackend',
        'ENABLED': True,
    })
    {{ if has "support_legacy" .Values.waldur.features }}
    WALDUR_SUPPORT['USE_OLD_API'] = True
    {{ end }}
    WALDUR_SUPPORT['CREDENTIALS'].update({
    {{ if .Values.waldur.support.servicedeskToken }}
        'email': '{{ .Values.waldur.support.servicedeskEmail }}',
        'token': '{{ .Values.waldur.support.servicedeskToken }}',
    {{ else }}
        'username': '{{ .Values.waldur.support.servicedeskUsername}}',
        'password': '{{ .Values.waldur.support.servicedeskPassword }}',
    {{ end }}
        'server': '{{ .Values.waldur.support.servicedeskUrl }}',
    })
    WALDUR_SUPPORT['ISSUE'].update({
        'caller_field': 'Request participants',
    {{ if .Values.waldur.support.organizationField }}
        'organisation_field': '{{ .Values.waldur.support.organizationField }}',
    {{ end }}
    })
    WALDUR_SUPPORT['PROJECT'].update({
        'key': '{{ .Values.waldur.support.projectKey }}',
    })
    {{ if not .Values.waldur.support.useAutomaticRequestMapping }}
    WALDUR_SUPPORT['USE_AUTOMATIC_REQUEST_MAPPING'] = False
    {{ end }}
    {{ else }}
    WALDUR_SUPPORT.update({
        'ENABLED': False,
    })
    {{ end }}
    {{ end }}

    #
    # waldur-openstack
    #
    {{ if not (has "waldur_openstack.openstack" .Values.waldur.disabledExtensions) }}
    {{ if has "show_openstack_credentials" .Values.waldur.features }}
    WALDUR_OPENSTACK.update({
        'TENANT_CREDENTIALS_VISIBLE': True,  # enable display of OpenStack credentials to users
    })
    {{ else }}
    WALDUR_OPENSTACK.update({
        'TENANT_CREDENTIALS_VISIBLE': False,  # disable display of OpenStack credentials to users
    })
    {{ end }}
    {{ end }}

    {{ if has "allow_direct_external_network_connection" .Values.waldur.features }}
    WALDUR_OPENSTACK_TENANT.update({
        'ALLOW_DIRECT_EXTERNAL_NETWORK_CONNECTION': True,
    })
    {{ end }}

    {{ if and (has "show_openstack_console" .Values.waldur.features) (not (has "waldur_openstack.openstack_tenant" .Values.waldur.disabledExtensions)) }}
    WALDUR_OPENSTACK_TENANT.update({
        'ALLOW_CUSTOMER_USERS_OPENSTACK_CONSOLE_ACCESS': True,
    })
    {{ end }}

    {{ if and (has "disable_openstack_private_offering_creation" .Values.waldur.features) (not (has "waldur_mastermind.marketplace_openstack" .Values.waldur.disabledExtensions)) }}
    WALDUR_MARKETPLACE_OPENSTACK.update({
        'AUTOMATICALLY_CREATE_PRIVATE_OFFERING': False,
    })
    {{ end }}

    {{ if and (has "paypal" .Values.waldur.features) (not (has "waldur_paypal" .Values.waldur.disabledExtensions)) }}
    #
    # waldur-paypal
    #

    # See also http://docs.waldur.com/PayPal+plugin+configuration
    WALDUR_PAYPAL.update({
        'ENABLED': True,
        'BACKEND': {
            'mode': 'live',
            'client_id': '{{ .Values.waldur.paypal.clientId }}',
            'client_secret': '{{ .Values.waldur.paypal.secret }}',
            'currency_name': 'EUR',
        }
    })
    {{ end }}

    {{ if .Values.waldur.mail.from }}
    DEFAULT_FROM_EMAIL = '{{ .Values.waldur.mail.from }}'
    {{ end }}

    {{ if .Values.waldur.mail.replyTo }}
    DEFAULT_REPLY_TO_EMAIL = '{{ .Values.waldur.mail.replyTo }}'
    {{ end }}

    {{ if .Values.waldur.languageChoices }}
    LANGUAGES = (
        ('en', 'English'),
    {{ if has "et" .Values.waldur.languageChoices }}
        ('et', 'Eesti'),
    {{ end }}
    {{ if has "lt" .Values.waldur.languageChoices }}
        ('lt', 'Lietuvių'),
    {{ end }}
    {{ if has "lv" .Values.waldur.languageChoices }}
        ('lv', 'Latviešu'),
    {{ end }}
    {{ if has "ru" .Values.waldur.languageChoices }}
        ('ru', 'Русский'),
    {{ end }}
    {{ if has "it" .Values.waldur.languageChoices }}
        ('it', 'Italiano'),
    {{ end }}
    {{ if has "de" .Values.waldur.languageChoices }}
        ('de', 'Deutsch'),
    {{ end }}
    {{ if has "da" .Values.waldur.languageChoices }}
        ('da', 'Dansk'),
    {{ end }}
    {{ if has "sv" .Values.waldur.languageChoices }}
        ('sv', 'Svenska'),
    {{ end }}
    {{ if has "es" .Values.waldur.languageChoices }}
        ('es', 'Español'),
    {{ end }}
    {{ if has "fr" .Values.waldur.languageChoices }}
        ('fr', 'Français'),
    {{ end }}
    {{ if has "nb" .Values.waldur.languageChoices }}
        ('nb', 'Norsk'),
    {{ end }}
    )
    {{ end }}


    {{ if has "pid_datacite" .Values.waldur.features }}
    WALDUR_PID['DATACITE'].update({
        'REPOSITORY_ID': '{{ .Values.waldur.pid_datacite.repository_id }}',
        'PASSWORD': '{{ .Values.waldur.pid_datacite.password }}',
        'PREFIX': '{{ .Values.waldur.pid_datacite.prefix }}',
        'API_URL': '{{ .Values.waldur.pid_datacite.url }}',
        'PUBLISHER': '{{ .Values.waldur.pid_datacite.publisher }}',
        'COLLECTION_DOI': '{{ .Values.waldur.pid_datacite.collection_doi }}',
    })
    {{ end }}

    {{ if has "academic_domain" .Values.waldur.features }}
    WALDUR_CORE["TRANSLATION_DOMAIN"] = "academic"
    {{ end }}

    {{ if has "academic_shared_domain" .Values.waldur.features }}
    WALDUR_CORE["TRANSLATION_DOMAIN"] = "academic_shared"
    {{ end }}

    {{ if .Values.waldur.defaultLanguage }}
    LANGUAGE_CODE = {{ .Values.waldur.defaultLanguage | quote }}
    {{ end }}

    {{ if .Values.waldur.homeport.invitationCivilCodeHelpText }}
    WALDUR_CORE["INVITATION_CIVIL_CODE_HELP_TEXT"] = {{ .Values.waldur.homeport.invitationCivilCodeHelpText | quote }}
    {{ end }}

    {{ if .Values.waldur.sentryDSN }}
    WALDUR_CORE["HOMEPORT_SENTRY_DSN"] = {{ .Values.waldur.sentryDSN | quote }}
    {{ end }}

    WALDUR_CORE["HOMEPORT_SENTRY_ENVIRONMENT"] = os.environ.get("SENTRY_ENVIRONMENT", "production")

    WALDUR_CORE.update({
        'LOCAL_IDP_NAME': '{{ .Values.waldur.localIdp.name }}',
        'LOCAL_IDP_LABEL': '{{ .Values.waldur.localIdp.label }}',
        'LOCAL_IDP_MANAGEMENT_URL': '{{ .Values.waldur.localIdp.managementUrl }}',
        'LOCAL_IDP_PROTECTED_FIELDS': {{ .Values.waldur.localIdp.protectedFields | toJson }},
    })

    {{ if .Values.waldur.mastermindUrl }}
    WALDUR_CORE["MASTERMIND_URL"] = {{ .Values.waldur.mastermindUrl | quote }}
    {{ end }}

    {{ if .Values.waldur.support.skipVerify }}
    WALDUR_JIRA.update(
        {
            'VERIFY_SSL': False
        }
    )
    {{ end }}

    {{ if .Values.waldur.keycloak_sync.enabled }}
    WALDUR_KEYCLOAK['ENABLED'] = True
    WALDUR_KEYCLOAK['BASE_URL'] = {{ .Values.waldur.keycloak_sync.base_url | quote }}
    WALDUR_KEYCLOAK['REALM'] = {{ .Values.waldur.keycloak_sync.realm | quote }}
    WALDUR_KEYCLOAK['CLIENT_ID'] = {{ .Values.waldur.keycloak_sync.client_id | quote }}
    WALDUR_KEYCLOAK['CLIENT_SECRET'] = {{ .Values.waldur.keycloak_sync.client_secret | quote }}
    WALDUR_KEYCLOAK['USERNAME'] = {{ .Values.waldur.keycloak_sync.username | quote }}
    WALDUR_KEYCLOAK['PASSWORD'] = {{ .Values.waldur.keycloak_sync.password | quote }}
    {{ end }}
