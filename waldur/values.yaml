# Default values for waldur.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount:
  homeport: 1
  api: 1
  worker: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

apiScheme: "http"
homeportScheme: "http"
apiHostname: waldur.local
apiExtraHosts: []
homeportHostname: waldur.local
homeportExtraHosts: []

affinity: {}

apiResources:
  requests:
    cpu: 500m
    memory: 2000Mi
  limits:
    cpu: 1000m
    memory: 4000Mi

workerResources:
  requests:
    cpu: 1000m
    memory: 2000Mi
  limits:
    cpu: 2000m
    memory: 4000Mi

homeportResources:
  requests:
    cpu: 250m
    memory: 500Mi
  limits:
    cpu: 500m
    memory: 1000Mi

beatResources:
  requests:
    cpu: 250m
    memory: 500Mi
  limits:
    cpu: 500m
    memory: 1000Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after '*resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

cronjobResources:
  waldur:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  postgres:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

hpa:
  api:
    enabled: false
    resources:
      requests:
        cpu: 500m
    cpuUtilizationBorder: 70
  celery:
    enabled: false
    workerResources:
      requests:
        cpu: 2000m
    beatResources:
      requests:
        cpu: 300m
    cpuUtilizationBorder: 80

nodeSelector: {}

tolerations: []

ingress:
  # Supported values: nginx, haproxy and openshift-default
  className: "nginx"
  tls:
    enabled: false
    source: "secret" # Possible values: `letsEncrypt` and `secret`
    customMastermindSecretName: ""
    customHomeportSecretName: ""
    secretsDir: "tls"  # Enabled only if source == `secret`
  whitelistSourceRange: '' # E.g. '192.168.22.0/24'
  whitelistSourceRangeAdmin: ''

celery:
  worker:
    enabled: true

proxy:
  httpsProxy: ""
  httpProxy: ""
  noProxy: ""

# overrides hostAliases in the Waldur deployment's pods
hostAliases: []
  # - ip: "1.2.3.4"
  #   hostnames:
  #     - "my.host.com"

waldur:
  imageName: "opennode/waldur-mastermind"
  imageTag: "7.8.4"
  initdbEnabled: true
  initdbImageName: "library/postgres"
  pullPolicy: IfNotPresent
  secretKey: "SecretKeyChangeMe"
  secretKeyExistingSecret:
    name: ""
    key: ""
  supportToken: ""
  supportTokenExistingSecret:
    name: ""
    key: ""
  staffToken: ""
  staffTokenExistingSecret:
    name: ""
    key: ""
  debug: false
  mail:
    host: ""
    port: ""
    username: ""
    password: ""
    useTLS: "false"
    useSSL: "false"
    from: ""
    hookFrom: ""
    replyTo: ""
  notificationSubject: ""
  timeZone: "UTC"
  features: []
  currencyName: "EUR"
  mastermindUrl: ""
  site:
    name: "Waldur"
    logo: ""
    address: ""
    email: ""
    phone: ""
  defaultLanguage: "en"
  languageChoices:
    - en
    - et
    - lt
    - lv
    - ru
    - it
    - de
    - da
    - sv
    - es
    - fr
    - nb
    - ar
    - cs
  disabledRoles:
    - customer_manager
    - customer_support
    - call_manager
    - proposal_manager
  customRoleDescriptions: {}
  customRolePermissions: {}
  authMethods:
    - LOCAL_SIGNIN
  socialAuthMethods: []
  localIdp:
    name: ""
    label: ""
    managementUrl: ""
    protectedFields: []
  defaultIdp: ""
  overrideSubnetBlacklist: []
  remoteEduteams:
    existingSecret:
      name: ""
      refreshTokenKey: ""
      clientIDKey: ""
      clientSecretKey: ""
      userinfoUrlKey: ""
      tokenUrlKey: ""
      sshApiUrlKey: ""
      sshApiUsernameKey: ""
      sshApiPasswordKey: ""
    refreshToken: ""
    clientID: ""
    clientSecret: ""
    userinfoUrl: ""
    tokenUrl: ""
    sshApiUrl: ""
    sshApiUsername: ""
    sshApiPassword: ""
    enableSync: false
  ldap:
    host: ""
    baseDN: ""
    userDN: ""
    user: ""
    password: ""
    passwordExistingSecret:
      name: ""
      key: ""
    admins: ""
    support: ""
  freeipa:
    hostname: ""
    password: ""
    passwordExistingSecret:
      name: ""
      key: ""
    username: ""
    verifySSL: ""
    groupnamePrefix: ""
    usernamePrefix: ""
  valimo:
    dir: "waldur_valimo"
    valimoClientKey: ""
    valimoClientCrt: ""
    apId: ""
    apPwd: ""
    dnsname: ""
    url: ""
    signatureProfile: ""
    label: ""
    mobilePrefix: ""
    managementUrl: ""
    protectedFields: []
  paypal:
    existingSecret:
      name:
      secretKey: ""
    secret: ""
    clientId: ""
  invoice:
    company: ""
    address: ""
    country: ""
    email: ""
    postalCode: ""
    phoneCountryCode: ""
    phoneNationalNumber: ""
    bank: ""
    bankAccount: ""
    vatCode: ""
    paymentInterval: ""
  invoice_reporting:
    enabled: false
    email: ""
    sap_params:
      km_kood: ""
      org_code: ""
      makset: ""
      funka: ""
      fund: ""
      eeluks: ""
      kuluuksus: ""
  slurm:
    customerPrefix: ""
    projectPrefix: ""
    allocationPrefix: ""
  support:
    backend: "zammad" # Can be "atlassian", "zammad" or "smax"
    existingSecret:
      name: ""
    atlassian:
      servicedeskEmail: ""
      servicedeskToken: ""
      servicedeskUsername: ""
      servicedeskPassword: ""
      servicedeskUrl: ""
      skipVerify: false
      organizationField: ""
      projectKey: ""
      useAutomaticRequestMapping: true
      legacy: false
    zammad:
      apiUrl: ""
      token: ""
      group: ""
      articleType: "email"
      commentCooldownDuration: 5
    smax:
      apiUrl: ""
      tenantId: ""
      login: ""
      password: ""
      organisationField: ""
      projectField: ""
      affectedResourceField: ""
      timesToPull: 10
      secondsToWait: 1
      creationSourceName: ""
      verifySSL: True
  marketplace:
    notify_staff: false
    script:
      enabled: false
      dockerImages: {}
      kubeconfigPath: "k8s/kubeconfig"
      kubeconfig: ""
      k8sNamespace: "default"
      jobTimeout: 1800
  pid_datacite:
    repository_id: ""
    password: ""
    prefix: ""
    url: ""
    publisher: ""
    collection_doi: ""
  sentryDSN: ""
  whitelabeling:
    # Icons mount at /etc/waldur/icons, thus the path to logo should contain:
    # /etc/waldur/icons/ plus the name of the file as specified in icons-config.yaml configmap
    # see test/values.yaml for working examples
    shortPageTitle: ""
    modePageTitle: ""
    loginLogoPath: ""
    sidebarLogoPath: ""
    sidebarLogoDarkPath: ""
    sidebarStyle: "dark"
    disableDarkTheme: false
    poweredByLogoPath: ""
    faviconPath: ""
    tosHtmlPath: ""
    brandColor: ""
    heroImagePath: ""
    heroLinkLabel: ""
    heroLinkUrl: ""
    privacyHtmlPath: ""
    siteDescription: ""
    supportPortalLink: ""
    tosHtml: ""
    privacyHtml: ""
    autoApproveUserTOS: false
  customInvitations:
    webhookUrl: ""
    tokenUrl: ""
    tokenClientId: ""
    tokenSecret: ""
  serviceAccountApiIntegration:
    enabled: false
    tokenUrl: ""
    managementUrl: ""
    tokenClientId: ""
    tokenSecret: ""
  courseAccountApiIntegration:
    enabled: false
    tokenUrl: ""
    managementUrl: ""
    tokenClientId: ""
    tokenSecret: ""
  enableStrictCheckAcceptingInvitation: false
  # Measured in weeks number
  invitationDuration:
    individual: 1
    group: 1
  mastermindTemplating:
    mastermindTemplatesPath: "mastermind_templates/mastermind-templates.yaml"
    mastermindTemplates: {}
  notifications: []
  saml2:
    dir: "waldur_saml2"
    federations: []
  ssh_public_key_path: ""
  ssh_private_key_path: ""
  ssh_public_key: ""
  ssh_private_key: ""
  homeport:
    imageName: "opennode/waldur-homeport"
    matomoUrlBase: ""
    matomoSiteId: ""
    customSentryURL: ""
    userMandatoryFields: {}
    userRegistrationHiddenFields: {}
    docsLink: "https://docs.waldur.com"
    invitationCivilCodeHelpText: ""
  metricsExporter:
    enabled: false
    includeAnnotations: true
  uvkEverypay:
    existingSecret:
      name:
      everypayUsernameKey: ""
      everypayPasswordKey: ""
      azureClientIDKey: ""
      azureClientSecretKey: ""
    enabled: false
    imageTag: latest
    uvkServer: "https://uvk-test.ut.ee/client/a74/server.php?format=JSON&action=uvk__"
    everypayGateway: "https://igw-demo.every-pay.com/api/v4"
    everypayUsername: ""
    everypayPassword: ""
    azureTenantID: ""
    azureClientID: ""
    azureClientSecret: ""
    azureScope: ""
  rabbitmqEvents:
    mqttEnabled: false
    stompEnabled: false

networkPolicy:
  enabled: false

readonlyDB:
  enabled: false
  username: ""
  password: ""

readonlyDBReplica:
  enabled: false
  replicaHost: "waldur-postgres-repl"

externalDB:
  enabled: false
  flavor: "zalando"
  secretName: "waldur.waldur.credentials.postgresql.acid.zalan.do"
  serviceName: "waldur-postgres"

postgresql:
  enabled: false
  auth:
    username: "waldur"
    password: "waldur"
    database: "waldur"
  # The values are in use only if postgresql.enabled = true
  primary:
    persistence:
      size: "10Gi"
    resources:
      requests:
        memory: "1024Mi"
        cpu: "500m"
      limits:
        memory: "2048Mi"
        cpu: "1000m"
  image:
    repository: bitnamilegacy/postgresql
    tag: "16.4.0-debian-12-r19"
  metrics:
    enabled: false
    image:
      registry: "docker.io"
      repository: bitnamilegacy/postgres-exporter
      tag: 0.17.1-debian-12-r14

postgresqlha:
  enabled: false
  postgresql:
    database: waldur
    username: waldur
    password: waldur
    postgresPassword: postgres
    repmgrPassword: repmgr
    replicaCount: 3
    image:
      repository: bitnamilegacy/postgresql-repmgr
      tag: "16.4.0-debian-12-r26"
  pgpool:
    image:
      repository: bitnamilegacy/pgpool
      tag: "4.6.2-debian-12-r7"

postgresBackup:
  enabled: false
  schedule: "0 5 * * *"
  rotationSchedule: "0 6 * * 6"
  maxNumber: 10
  image: opennode/postgres-minio:0.1.0
  name: "waldur"

minio:
  accessKey: ""
  secretKey: ""
  bucketName: data
  ## min.io service endpoint used for communication inside a cluster
  endpoint: "http://minio.default.svc.cluster.local:9000" ## See docs/service-endpoint.md for details.

rabbitmq:
  enabled: false
  auth:
    username: "waldur"
    password: "waldur"
  # The values are in use only if rabbitmq.enabled = true
  image:
    registry: "docker.io"
    repository: "bitnamilegacy/rabbitmq"
    tag: "4.1.3-debian-12-r1"
  replicaCount: 1
  extraPlugins: "rabbitmq_auth_backend_ldap rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp"
  resources:
    requests:
      cpu: 1
      memory: 2048Mi
    limits:
      cpu: 2
      memory: 4096Mi
  extraContainerPorts:
  - name: mqtt
    containerPort: 1883
    protocol: TCP
  - name: stomp
    containerPort: 61613
    protocol: TCP
  - name: mqtt-websocket
    containerPort: 15675
    protocol: TCP
  - name: stomp-websocket
    containerPort: 15674
    protocol: TCP
  service:
    extraPorts:
    - name: mqtt
      protocol: TCP
      port: 1883
      targetPort: mqtt
    - name: stomp
      protocol: TCP
      port: 61613
      targetPort: stomp
    - name: mqtt-websocket
      protocol: TCP
      port: 15675
      targetPort: mqtt-websocket
    - name: stomp-websocket
      protocol: TCP
      port: 15674
      targetPort: stomp-websocket
  networkPolicy:
    extraIngress:
    - ports:
      - protocol: TCP
        containerPort: 1883
        port: 1883
      - protocol: TCP
        containerPort: 15675
        port: 15675
  persistence:
    enabled: true
    size: "10Gi"
    storageClass: ""
  clustering:
    forceBoot: true
  # hostname of rabbitmq service, respected only if rabbitmq.enabled = false and RMQ release is deployed separately
  host: "rmq-rabbitmq"
  # secrets of rabbitmq admin user, respected only if rabbitmq.enabled = false and RMQ release is deployed separately
  secret:
    name: ""
    usernameKey: ""
    passwordKey: ""

stressTesting:
  enabled: false
  locustFilePath: "locust_task/locust_test.py"

global:
  imageRegistry: "docker.io"
  # TODO: remove after migration to a stable RabbitMQ and PostgreSQL images from bitnamilegacy repo
  security:
    allowInsecureImages: true
